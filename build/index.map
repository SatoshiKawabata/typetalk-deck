{"version":3,"sources":["models/view.ts","Actions.ts","typetalk/Streaming.ts","typetalk/Typetalk.ts","Api.ts","utils/utils.ts","components/molecules/Input.tsx","components/atoms/LikeToggle.tsx","components/molecules/Post.tsx","components/molecules/PostListMenu.tsx","components/molecules/ThreadPost.tsx","components/organisms/PostList.tsx","components/organisms/TopicList.tsx","components/templates/Container.tsx","State.ts","index.ts"],"names":[],"mappings":"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","file":"index.map","sourcesContent":["import { IMessageList } from \"../typetalk/Models\";\n\nexport type TabName = \"all\" | \"favorites\";\n\n/**\n * 各列の見た目の状態\n */\nexport interface IColumn {\n  width: number;\n}\n\nexport const defaultColumn = (): IColumn => {\n  return {\n    width: 400\n  };\n}\n\nexport interface IView {\n  tabName: TabName;\n  replyInput: number; // to show reply input UI\n  showThread: number;\n  columns: { [key: number]: IColumn}; // key: topicId\n  draggingMessageList: IMessageList;\n}\n","import { IState } from \"./State\";\nimport { IMessageList, IPost, ITopics, IProfile, ITopic } from \"./typetalk/Models\";\nimport { TabName, defaultColumn } from \"./models/view\";\n\n/**\n * APIの呼び出しはコンポーネント側で行い、ActionsではStateへの変更するだけに留めるのがいいのではないかと思っている\n */\nexport default class Actions {\n\n  private static getMessageListIndex(topicId: number, state: IState) {\n    let index = -1;\n    state.messageLists.find((list, i) => {\n      if (list.topic.id === topicId) {\n        index = i;\n        return true;\n      }\n    });\n    return index;\n  }\n\n  topics = (topics: ITopics) => (state: IState, actions: Actions) => {\n    return {\n      topics\n    };\n  }\n\n  tabName = (tabName: TabName) => (state: IState, actions: Actions) => {\n    state.view.tabName = tabName;\n    return {\n      view: state.view\n    };\n  }\n\n  replyInput = (replyTo: number) => (state: IState, actions: Actions) => {\n    state.view.replyInput = replyTo;\n    return {\n      view: state.view\n    };\n  }\n\n  toggleShowThread = (postId: number) => (state: IState, actions: Actions) => {\n    state.view.showThread = postId;\n    return {\n      view: state.view,\n    };\n  }\n\n  unshiftMessageList = (messageList: IMessageList) => (state: IState, actions: Actions) => {\n    let idx;\n    const list = state.messageLists.find((l, i) => {\n      if (l.topic.id === messageList.topic.id) {\n        idx = i;\n        return true;\n      }\n    });\n    if (list) {\n      state.messageLists.splice(idx, 1);\n      state.messageLists.unshift(list);\n      return {\n        messageLists: state.messageLists\n      };\n    } else {\n      state.view.columns[messageList.topic.id] = defaultColumn();\n      return {\n        messageLists: [messageList, ...state.messageLists],\n        view: state.view\n      };\n    }\n  }\n\n  messageList = (messageList: IMessageList) => (state: IState, actions: Actions) => {\n    const index = Actions.getMessageListIndex(messageList.topic.id, state);\n    if (state.messageLists[index]) {\n      // merge posts\n      const oldPosts = state.messageLists[index].posts;\n      const newPosts = messageList.posts;\n      const willAdd = [];\n      oldPosts.forEach(oldPost => {\n        if (newPosts.find(post => post.id === oldPost.id) === undefined) {\n          willAdd.push(oldPost);\n        }\n      });\n      newPosts.unshift(...willAdd);\n      newPosts.sort((a, b) => {\n        const aDate = new Date(a.createdAt);\n        const bDate = new Date(b.createdAt);\n        if (aDate > bDate) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n    }\n    state.messageLists[index] = messageList;\n    return { messageLists: state.messageLists };\n  }\n\n  post = (post: IPost) => (state: IState, actions: Actions) => {\n    const messageList = state.messageLists.find(ml => ml.topic.id === post.topicId);\n    if (messageList) {\n      messageList.posts.push(post);\n      actions.messageList(messageList);\n    }\n  }\n\n  updatePost = (post: IPost) => (state: IState, actions: Actions) => {\n    const ml = state.messageLists.find(ml => {\n      return ml.topic.id === post.topicId;\n    });\n    ml && ml.posts.some((p, i) => {\n      if (p.id === post.id) {\n        ml.posts[i] = p;\n        return true;\n      }\n    });\n    actions.messageList(ml);\n  }\n\n  removeMessageList = (topicId: number) => (state: IState, actions: Actions) => {\n    let idx;\n    state.messageLists.some((ml, i) => {\n      if (ml.topic.id === topicId) {\n        idx = i;\n        return true;\n      }\n    });\n    if (idx > -1) {\n      state.messageLists.splice(idx, 1);\n      return {\n        messageLists: state.messageLists\n      };\n    }\n    return {};\n  }\n\n  selfProfile = (profile: IProfile) => (state: IState, actions: Actions) => {\n    return { selfProfile: profile };\n  };\n\n  dragstart = (messageList: IMessageList) => (state: IState, actions: Actions) => {\n    state.view.draggingMessageList = messageList;\n    return {\n      view: state.view\n    };\n  }\n\n  drop = (messageList: IMessageList) => (state: IState, actions: Actions) => {\n    if (state.view.draggingMessageList) {\n      const from = state.messageLists.indexOf(state.view.draggingMessageList);\n      const to = state.messageLists.indexOf(messageList);\n      state.messageLists[to] = state.view.draggingMessageList;\n      state.messageLists[from] = messageList;\n      return {\n        messageLists: state.messageLists\n      };\n    }\n  }\n\n  dragend = () => (state: IState, actions: Actions) => {\n    state.view.draggingMessageList = null;\n    return {\n      view: state.view\n    };\n  }\n}\n","import * as electron from \"electron\";\nimport { IPost, ISpace, ITalk, ITopic } from \"./Models\";\n\nexport default class Streaming {\n  start(callback: (msg: IStreaming) => void) {\n    electron.ipcRenderer.on(\"streaming-message\", (event, message) => {\n      callback(JSON.parse(message));\n    });\n  }\n}\n\nexport const StreamingEvent = {\n  ADD_TALK_POST: \"addTalkPost\",\n  CREATE_TALK: \"createTalk\",\n  DELATE_ATTACHMENT: \"deleteAttachment\",\n  DELETE_MESSAGE: \"deleteMessage\",\n  LIKE_MESSAGE: \"likeMessage\",\n  NOTIFY_MENTION: \"notifyMention\",\n  POST_LINK: \"postLinks\",\n  POST_MESSAGE: \"postMessage\",\n  READ_MENTION: \"readMention\",\n  SAVE_BOOKMARK: \"saveBookmark\",\n  SAVE_LIKES_BOOKMARK: \"saveLikesBookmark\",\n  UNLIKE_MESSAGE: \"unlikeMessage\",\n  UPDATE_MESSAGE: \"updateMessage\",\n  UPDATE_NOTIFICATION_ACCESS: \"updateNotificationAccess\",\n  UPDATE_SPACE: \"updateSpace\",\n  UPDATE_TALK: \"updateTalk\",\n  UPDATE_TOPIC: \"updateTopic\",\n};\n\nexport type StreamingEvent =\n  \"addTalkPost\" |\n  \"createTalk\" |\n  \"deleteAttachment\" |\n  \"deleteMessage\" |\n  \"likeMessage\" |\n  \"notifyMention\" |\n  \"postLinks\" |\n  \"postMessage\" |\n  \"readMention\" |\n  \"saveBookmark\" |\n  \"saveLikesBookmark\" |\n  \"unlikeMessage\" |\n  \"updateMessage\" |\n  \"updateNotificationAccess\" |\n  \"updateSpace\" |\n  \"updateTalk\" |\n  \"updateTopic\";\n\nexport interface IStreaming {\n  type: StreamingEvent;\n  data: any;\n}\n\nexport interface IpostMessage {\n  \"type\": \"postMessage\";\n  \"data\": {\n    \"space\": ISpace;\n    \"topic\": ITopic;\n    \"post\": IPost;\n    \"mentions\": any[];\n    \"exceedsAttachmentLimit\": boolean;\n    \"directMessage\": any;\n  };\n}\n\nexport interface IaddTalkPost extends IStreaming {\n  type: \"addTalkPost\";\n  data: {\n    topic: ITopic;\n    talk: ITalk;\n  };\n}\n\nexport interface IcreateTalk extends IStreaming {\n  type: \"createTalk\";\n  data: {\n    topic: ITopic;\n    talk: ITalk;\n    postIds: number[];\n  };\n}\n\nexport interface IdeleteAttachment extends IStreaming {\n  type: \"deleteAttachment\";\n  data: {\n    topic: ITopic;\n    post: IPost;\n    exceedsAttachmentLimit: boolean;\n  };\n}\n\nexport interface IdeleteMessage extends IStreaming {\n  type: \"deleteMessage\";\n  data: {\n    space: ISpace;\n    topic: ITopic;\n    post: IPost;\n    exceedsAttachmentLimit: boolean;\n  };\n}\n","import * as querystring from \"querystring\";\nimport { IAccessToken, IMessageList, IPost, IPostParam, IProfile, IReplies, ITopic, ITopics, ILike } from \"./Models\";\nimport Streaming, { IStreaming, StreamingEvent } from \"./Streaming\";\n\nconst secret = querystring.parse(location.search.split(\"?\")[1]);\nconst CLIENT_ID = secret.client_id;\nconst CLIENT_SECRET = secret.client_secret;\n\n/**\n * Typetalk api\n */\nexport default class TypeTalk {\n  private token!: IAccessToken;\n  private streaming: Streaming;\n  private streamingHandlers: Map<StreamingEvent, Array<(stream: IStreaming) => void>>;\n\n  constructor() {\n    this.streamingHandlers = new Map();\n  }\n\n  getToken() {\n    return this.postMethod<IAccessToken>(\"https://typetalk.com/oauth2/access_token\", {\n      client_id: CLIENT_ID,\n      client_secret: CLIENT_SECRET,\n      grant_type: \"client_credentials\",\n      scope: \"my,topic.read,topic.post\"\n    }).then((token) => {\n      this.token = token;\n      return token;\n    });\n  }\n\n  getProfile() {\n    return this.getMethod<IProfile>(\"https://typetalk.com/api/v1/profile\");\n  }\n\n  getTopics() {\n    return this.getMethod<ITopics>(\"https://typetalk.com/api/v1/topics\");\n  }\n\n  getMessageList(topicId: number, fromId: number = null) {\n    return this.getMethod<IMessageList>(`https://typetalk.com/api/v1/topics/${topicId}`,\n      fromId ? {from: fromId} : null\n    );\n  }\n\n  getPost(topicId: number, postId: number) {\n    return this.getMethod<IPost>(`https://typetalk.com/api/v1/topics/${topicId}/posts/${postId}`);\n  }\n\n  getReplies(topicId: number,  postId: number) {\n    return this.getMethod<IReplies>(`https://typetalk.com/api/v1/topics/${topicId}/posts/${postId}/replies`);\n  }\n\n  post(topicId: number, param: IPostParam) {\n    return this.postMethod<{\n      topic: ITopic,\n      psot: IPost,\n      mentions: string[]\n    }>(`https://typetalk.com/api/v1/topics/${topicId}`, param);\n  }\n\n  addEventListener(evtName: StreamingEvent, handler: (stream: IStreaming) => void) {\n    let handlers = this.streamingHandlers.get(evtName);\n    if (handlers) {\n      handlers.push(handler);\n    } else {\n      handlers = [handler];\n    }\n    this.streamingHandlers.set(evtName, handlers);\n  }\n\n  startStreaming() {\n    this.streaming = new Streaming();\n    this.streaming.start(msg => {\n\n      const handlers = this.streamingHandlers.get(msg.type);\n      if (handlers) {\n        handlers.forEach(h => {\n          h(msg);\n        });\n      }\n      // // debug\n      // console.log(msg);\n      // const data = localStorage.getItem(msg.type);\n      // if (!data) {\n      //   localStorage.setItem(msg.type, JSON.stringify(msg));\n      // }\n    });\n  }\n\n  like(topicId: number, postId: number) {\n    return this.postMethod<ILike>(`https://typetalk.com/api/v1/topics/${topicId}/posts/${postId}/like`, {});\n  }\n\n  unlike(topicId: number, postId: number) {\n    return this.deleteMethod<ILike>(`https://typetalk.com/api/v1/topics/${topicId}/posts/${postId}/like`, {});\n  }\n\n  private postMethod = <T>(url: string, param: any): Promise<T> => {\n    return new Promise<T>((res, rej) => {\n      const xhr = new XMLHttpRequest();\n      xhr.onload = () => {\n        res(JSON.parse(xhr.response));\n      };\n      xhr.onerror = () => {\n        rej(JSON.parse(xhr.response));\n      };\n      xhr.open(\"POST\", url);\n      if (this.token) {\n        xhr.setRequestHeader(\n          \"Authorization\",\n          `Bearer ${this.token.access_token}`\n        );\n      }\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send(JSON.stringify(param));\n      return xhr;\n    });\n  }\n\n  private getMethod = <T>(url: string, query: any = null): Promise<T> => {\n    return new Promise<T>((res, rej) => {\n      const xhr = new XMLHttpRequest();\n      xhr.onload = () => {\n        res(JSON.parse(xhr.response));\n      };\n      xhr.onerror = () => {\n        rej(JSON.parse(xhr.response));\n      };\n      xhr.open(\"GET\", `${url}?${querystring.stringify(query)}`);\n      if (this.token) {\n        xhr.setRequestHeader(\n          \"Authorization\",\n          `Bearer ${this.token.access_token}`\n        );\n      }\n      xhr.send();\n      return xhr;\n    });\n  }\n\n  private deleteMethod = <T>(url: string, param: any): Promise<T> => {\n    return new Promise<T>((res, rej) => {\n      const xhr = new XMLHttpRequest();\n      xhr.onload = () => {\n        res(JSON.parse(xhr.response));\n      };\n      xhr.onerror = () => {\n        rej(JSON.parse(xhr.response));\n      };\n      xhr.open(\"DELETE\", url);\n      if (this.token) {\n        xhr.setRequestHeader(\n          \"Authorization\",\n          `Bearer ${this.token.access_token}`\n        );\n      }\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.send(JSON.stringify(param));\n      return xhr;\n    });\n  }\n}\n","import TypeTalk from \"./typetalk/Typetalk\";\n/**\n * Tyoetalkオブジェクトのインスタンス\n */\nexport const typetalkApi = new TypeTalk();\n","import { IState } from \"../State\";\n\nexport const node2Array = (nodeList: NodeList): Node[] => {\n  const a = [];\n  for (let i = 0; i < nodeList.length; i++) {\n      a.push(nodeList[i]);\n  }\n  return a;\n};\n\nexport const isAddedToTop = (addedList: Node[], nodeList: NodeList): boolean => {\n  const list = node2Array(nodeList);\n  return addedList.some(node => {\n    return list.indexOf(node) === 0;\n  });\n};\n\nexport const classNames = (list: string[]): string => {\n  let result = \"\";\n  list.forEach(cn => {\n    result += cn + \" \";\n  });\n  return result;\n};\n\nexport const getPost = (state: IState, topicId: number, postId: number) => {\n  const ml = state.messageLists.find(ml => {\n    return ml.topic.id === topicId;\n  });\n  if (ml) {\n    return ml.posts.find((p, i) => {\n      return p.id === postId;\n    });\n  } else {\n    return null;\n  }\n}\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { typetalkApi } from \"../../Api\";\nimport { IPostParam, ITopic } from \"../../typetalk/Models\";\nimport \"./Input.css\";\n\nexport default ({ actions, topic, replyTo }: { topic: ITopic, actions: Actions, replyTo?: number}) => {\n\n  const localState = {\n    message: \"\"\n  };\n\n  const post = async (textarea: HTMLTextAreaElement) => {\n    textarea.disabled = true;\n    const param: IPostParam = {\n      message: localState.message\n    };\n    if (replyTo) {\n      param.replyTo = replyTo;\n    }\n    await typetalkApi.post(topic.id, param);\n    textarea.disabled = false;\n    textarea.value = \"\";\n  };\n\n  return (\n    <div\n      class=\"Input\"\n      oncreate={(elm: HTMLElement) => {elm.querySelector(\"textarea\").focus(); }}>\n      <textarea\n        oninput={(e: KeyboardEvent) => {\n          localState.message = (e.target as HTMLTextAreaElement).value;\n        }}\n        onkeydown={(e: KeyboardEvent) => {\n          // valueに入力したテキストがちゃんと入ってくるために遅延させる\n          setTimeout(async () => {\n            if (e.keyCode === 13 && !e.shiftKey) { // Enterキー\n              post(e.target as HTMLTextAreaElement);\n            }\n          }, 1);\n        }}/>\n      <button\n        type=\"button\"\n        onclick={(e: Event) => {\n          const textarea = (e.target as HTMLElement).parentElement.querySelector(\"textarea\");\n          post(textarea);\n        }}>Post</button>\n    </div>\n  );\n};\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { IPost, IAccount, IProfile } from \"../../typetalk/Models\";\nimport { typetalkApi } from \"../../Api\";\nimport \"./LikeToggle.css\";\nimport { IState } from \"../../State\";\nimport { getPost } from \"../../utils/utils\";\n\nexport default ({state, post, actions}: {state: IState, post: IPost, actions: Actions}) => {\n  const isLikedByMe = isProfileIncludes(post.likes, state.selfProfile);\n  return (\n    <div class=\"LikeToggle\">\n      <button type=\"button\" onclick={async () => {\n        if (isLikedByMe) {\n          const res = await typetalkApi.unlike(post.topicId, post.id);\n          const resultPost = getPost(state, res.like.topicId, res.like.postId);\n          setLike(resultPost, res.like, false);\n          actions.updatePost(resultPost);\n        } else {\n          const res = await typetalkApi.like(post.topicId, post.id);\n          const resultPost = getPost(state, res.like.topicId, res.like.postId);\n          setLike(resultPost, res.like, true);\n          actions.updatePost(resultPost);\n        }\n      }}>\n        {isLikedByMe ? \"♥\" : \"♡\"} {post.likes.length}\n      </button>\n    </div>\n  );\n};\n\nconst isProfileIncludes = (profiles: IProfile[], profile: IProfile) => {\n  return profiles.some(p => {\n    return isMe(p.account, profile.account);\n  })\n}\n\nconst isMe = (accountA: IAccount, accountB: IAccount) => {\n  return accountA.id === accountB.id;\n}\n\nconst setLike = (post: IPost, profile: IProfile, isLike: boolean) => {\n  if (isLike) {\n    post.likes.push(profile);\n  } else {\n    post.likes.some((like, i) => {\n      if (isMe(like.account, profile.account)) {\n        post.likes.splice(i, 1);\n        return true;\n      }\n    });\n  }\n\n}\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { typetalkApi } from \"../../Api\";\nimport { IState } from \"../../State\";\nimport { IPost } from \"../../typetalk/Models\";\nimport \"./Post.css\";\nimport LikeToggle from \"../atoms/LikeToggle\";\nimport { IView } from \"../../models/view\";\n\nexport default ({state, post, isObserve, actions, view}: {state: IState, post: IPost, isObserve: boolean, actions: Actions, view: IView}) => {\n  const oncreate = isObserve ?\n    (elm: HTMLElement) => {\n      const io = new IntersectionObserver(async entries => {\n          if (entries[0].isIntersecting) {\n            io.disconnect();\n            const messageList = await typetalkApi.getMessageList(post.topicId, post.id);\n            actions.messageList(messageList);\n          }\n        });\n      io.observe(elm);\n    }\n    : null;\n  const urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig;\n  const newMessage = post.message.replace(urlRegex, (url: string) => {\n      return `<a href=${url} target=\"_blank\">${url}</a>`;\n  });\n  return (\n    <div class=\"Post\" oncreate={oncreate}>\n      <div class=\"Post__thumbnail-container\">\n        <img src={post.account.imageUrl} alt={post.account.fullName} />\n      </div>\n      <button\n        type=\"button\"\n        class=\"Post__post-container\"\n        onclick={() => {\n          if (view.replyInput === post.id) {\n            actions.replyInput(null);\n            actions.toggleShowThread(null);\n          } else {\n            actions.replyInput(post.id);\n            actions.toggleShowThread(post.id);\n          }\n        }}>\n        <p>{post.account.fullName}</p>\n        <p class=\"Post__post-message\" innerHTML={newMessage}></p>\n      </button>\n      <LikeToggle state={state} actions={actions} post={post} />\n    </div>\n  );\n};\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport \"./PostListMenu.css\";\nimport { ITopic } from \"../../typetalk/Models\";\n\nexport default ({ actions, topic }: { topic: ITopic, actions: Actions }) => {\n\n  return (\n    <div class=\"PostListMenu\">\n      <button\n        class=\"PostListMenu--hide\"\n        type=\"button\"\n        onclick={(e: Event) => {\n          const { classList } = (e.target as HTMLElement);\n          if (classList.contains(\"PostListMenu--hide\")) {\n            classList.remove(\"PostListMenu--hide\");\n          } else {\n            classList.add(\"PostListMenu--hide\");\n          }\n        }}>...</button>\n      <div class=\"PostListMenu__menu\">\n        <ul>\n          <li>\n            <button type=\"button\" onclick={() => {\n              actions.removeMessageList(topic.id);\n            }}>Remove this topic</button>\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { IState } from \"../../State\";\nimport \"./ThreadPost.css\";\nimport { IView } from \"../../models/view\";\nimport { IPost } from \"../../typetalk/Models\";\nimport Post from \"./Post\";\n\nexport default ({state, listPost, post, isObserve, actions, view}: {state: IState, listPost: IPost[], post: IPost, isObserve: boolean, actions: Actions, view: IView}) => {\n    const threadPostList: IPost[] = [];\n    let currentReplyTo: number = post.replyTo;\n    while (currentReplyTo) {\n        for (const p of listPost) {\n            if (p.id === currentReplyTo) {\n                threadPostList.unshift(p);\n                currentReplyTo = p.replyTo;\n                break;\n            }\n        }\n    }\n    return (\n        <div class=\"ThreadPost\">\n            {\n                threadPostList.map((thread, i) => (\n                    <div class=\"ThreadPost__container\">\n                        <Post state={state} post={thread} isObserve={isObserve} actions={actions} view={view} />\n                        {((p) => {\n                            // draw reply line\n                            if (p.replyTo) {\n                                return <div className=\"PostList__reply-line\"></div>;\n                            }\n                        })(thread)}\n\n                    </div>\n                ))\n            }\n        </div>\n    );\n};\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { IState } from \"../../State\";\nimport { IMessageList } from \"../../typetalk/Models\";\nimport { isAddedToTop, node2Array } from \"../../utils/utils\";\nimport Input from \"../molecules/Input\";\nimport Post from \"../molecules/Post\";\nimport \"./PostList.css\";\nimport PostListMenu from \"../molecules/PostListMenu\";\nimport { IView } from \"../../models/view\";\nimport ThreadPost from \"../molecules/ThreadPost\";\n\nexport default ({state, list, actions, view}: {state: IState, list: IMessageList, actions: Actions, view: IView}) => {\n  return [\n    <div class=\"PostList__title\">\n      <span class=\"PostList__topic-name\">{list.topic.name}</span>\n      <PostListMenu actions={actions} topic={list.topic} />\n    </div>,\n    <ul\n      class=\"PostList__scroll\"\n      oncreate={(elm: HTMLElement) => {\n        elm.scrollTop = Number.MAX_SAFE_INTEGER;\n        const mo = new MutationObserver(mutations => {\n          let addedHeight = 0;\n          const isTop = isAddedToTop(mutations.map(m => m.addedNodes[0]), elm.childNodes);\n          if (isTop) {\n            mutations.forEach(m => {\n              if (m.addedNodes.length) {\n                node2Array(m.addedNodes).forEach(node => {\n                  addedHeight += (node as HTMLElement).offsetHeight;\n                });\n              }\n            });\n            elm.scrollTop += addedHeight;\n          }\n        });\n        mo.observe(elm, {\n          childList: true\n        });\n      }}\n      >\n      {\n        list.posts.map((post, i) => (\n          <li\n            key={post.id}\n            oncreate={(elm: HTMLElement) => {\n              // draw reply line\n              if (elm.children[0].classList.contains(\"PostList__reply-line--unconnected\")) {\n                (elm.children[0] as HTMLElement).style.height = `${10}px`;\n              } else if (elm.children[0].classList.contains(\"PostList__reply-line\")) {\n                const parent = elm.parentElement;\n                const replyTo = parent.children[i - 1] as HTMLElement;\n                const height = elm.offsetTop - replyTo.offsetTop - 40;\n                (elm.children[0] as HTMLElement).style.height = `${height}px`;\n              }\n            }}>\n            {(() => {\n              // draw reply line\n              const prev = list.posts[i - 1];\n              if (prev && post.replyTo === prev.id) {\n                // draw line\n                return <div class=\"PostList__reply-line\"></div>;\n              } else if (post.replyTo) {\n                return <div class=\"PostList__reply-line PostList__reply-line--unconnected\"></div>;\n              }\n            })()}\n            {view.showThread === post.id ? <ThreadPost state={state} listPost={list.posts} post={post} isObserve={i === 0} actions={actions} view={view}/> : null}\n            <Post state={state} post={post} isObserve={i === 0} actions={actions} view={view} />\n            {view.replyInput === post.id\n              ? <Input actions={actions} topic={list.topic} replyTo={view.replyInput}/>\n              : null}\n          </li>\n        ))\n      }\n    </ul>,\n    <Input actions={actions} topic={list.topic} />\n  ];\n};\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { typetalkApi } from \"../../Api\";\nimport { IState } from \"../../State\";\nimport \"./TopicList.css\";\n\nexport default ({state, actions}: {state: IState, actions: Actions}) => {\n\n  const visibleTopics = (() => {\n    if (state.topics && state.view.tabName === \"all\") {\n      return state.topics.topics.filter((topic) => !topic.favorite);\n    } else if (state.topics && state.view.tabName === \"favorites\") {\n      return state.topics.topics.filter((topic) => topic.favorite);\n    } else {\n      return [];\n    }\n  })();\n\n  return [\n    <ul>\n      <li>\n        <button\n          class={\n            state.view.tabName === \"all\"\n            ? \"TopicList__tablist--selected\" : null\n          }\n          type=\"button\"\n          onclick={() => { actions.tabName(\"all\"); }}>All</button>\n      </li>\n      <li>\n        <button\n          class={\n            state.view.tabName === \"favorites\"\n            ? \"TopicList__tablist--selected\" : null\n          }\n          type=\"button\"\n          onclick={() => { actions.tabName(\"favorites\"); }}>Favorites</button>\n      </li>\n    </ul>,\n    <ul class=\"TopicList__list\">\n      {\n        visibleTopics.map((topic) => (\n          <li>\n            <button\n              type=\"button\"\n              onclick={async () => {\n                const messageList = await typetalkApi.getMessageList(topic.topic.id);\n                actions.unshiftMessageList(messageList);\n              }}>\n              {topic.topic.name}\n            </button>\n            <span>{topic.unread.count}</span>\n          </li>\n        ))\n      }\n    </ul>\n  ];\n};\n","import { h } from \"hyperapp\";\nimport Actions from \"../../Actions\";\nimport { IState } from \"../../State\";\nimport PostList from \"../organisms/PostList\";\nimport TopicList from \"../organisms/TopicList\";\nimport \"./Container.css\";\n\nexport default (state: IState, actions: Actions) => {\n  console.log(\"state\", state);\n  return (\n    <div class=\"Container\">\n      <div class=\"Container__topic-list\">\n        <TopicList state={state} actions={actions} />\n      </div>\n      {\n        state.messageLists.map(list => {\n          const column = state.view.columns[list.topic.id];\n          return (\n            <div\n              draggable={true}\n              ondragstart={(e: Event) => {\n                actions.dragstart(list);\n              }}\n              ondrop={(e: Event) => {\n                actions.drop(list);\n              }}\n              ondragend={(e: Event) => {\n                actions.dragend();\n              }}\n              ondragenter={(e: Event) => { e.preventDefault(); }}\n              ondragover={(e: Event) => { e.preventDefault(); }}\n              class=\"Container__post-list\"\n              key={list.topic.id}\n              style={`flex-basis: ${column.width}px`}>\n              <PostList list={list} state={state} actions={actions} view={state.view} />\n            </div>\n          );\n        })\n      }\n    </div>\n  );\n};\n","import { IMessageList, IReplies, ITopics, IProfile } from \"./typetalk/Models\";\nimport { IView } from \"./models/view\";\n\nexport interface IState {\n  selfProfile: IProfile;\n  topics: ITopics;\n  messageLists: IMessageList[];\n  replies: IReplies;\n  view: IView;\n}\n\n/**\n * アプリケーション全体の状態\n * 一個のでっかいJSON\n */\nexport const state: IState = {\n  selfProfile: null,\n  messageLists: [],\n  topics: null,\n  replies: null,\n  view: {\n    tabName: \"favorites\",\n    replyInput: null,\n    columns: {},\n    showThread: null,\n    draggingMessageList: null\n  }\n};\n","import { app } from \"hyperapp\";\nimport Actions from \"./Actions\";\nimport { typetalkApi } from \"./Api\";\nimport Container from \"./components/templates/Container\";\nimport { state } from \"./State\";\nimport { IpostMessage } from \"./typetalk/Streaming\";\n\nconst actions: Actions = app(state, new Actions(), Container, document.body);\n\n// initialize\n(async () => {\n  await typetalkApi.getToken();\n\n  // トピックを取得\n  const topics = await typetalkApi.getTopics();\n  actions.topics(topics);\n\n  // Streaming apiからイベントを受け取る\n  typetalkApi.startStreaming();\n  typetalkApi.addEventListener(\"postMessage\", stream => {\n    const { data } = stream as IpostMessage;\n    actions.post(data.post);\n  });\n\n  // 自分のプロフィールを取得しておく\n  const selfProfile = await typetalkApi.getProfile();\n  actions.selfProfile(selfProfile);\n})();\n"]}